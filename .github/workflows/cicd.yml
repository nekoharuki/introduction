name:  nekoharuki-cicd
on:
  push:
env:
  AWS_REGION: us-west-2
  ECS_CLUSTER: susi-cluster
  ECS_SERVICE: git-service
  ECR_REPOSITORY: git-nginx
  ECS_TASK_DEFINITION_API: .aws/task.json

permissions:
  contents: read
  id-token: write

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Tests and Build an Image
        run: docker image build -t nignx_image:latest .
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker image tag nignx_image:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker image push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          echo $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} > nignx-image-url.txt
      
      - name: Upload the image url file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: nignx-image-url
          path: nignx-image-url.txt

  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: nignx-image-url
          path: artifacts
    
      - name: Define the image URI
        run: |
          echo "API_IMAGE_URI=$(cat artifacts/nignx-image-url.txt)" >> $GITHUB_ENV
    
      - name: Fill in the new image URI in the amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_API }}
          container-name: nginx
          image: ${{ env.API_IMAGE_URI }}
  
      - name: Deploy  ECS task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
